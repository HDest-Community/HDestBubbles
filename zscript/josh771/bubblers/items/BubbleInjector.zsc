class Bubble_Injector : Bubble_Weapon
{
    static clearscope Class<HDInjectorMaker> GetInjectorMaker(Weapon injector)
    {
        return HDestBubbleHandler.Get().injectors.At(injector.GetClassName());
    }

    static clearscope int GetInjectorSprite(readonly <Actor> injectorMaker)
    {
        let spriteMap    = HDestBubbleHandler.Get().injectorSprites;
        let spriteMapKey = injectorMaker.GetClassName();
        let spriteString = spriteMap.At(spriteMapKey);
        if (spriteString == "")
        {
            Array<State> seenStates;
            for (State st = injectorMaker.spawnState;
                st && seenStates.Find(st) == seenStates.Size();
                st = st.NextState)
            {
                seenStates.Push(st);

                if (st.sprite > 0)
                {
                    spriteMap.Insert(spriteMapKey, "" .. st.sprite);
                    return st.sprite;
                }
            }
        }

        return spriteString.ToInt();
    }

    override bool CheckVisible(Actor target)
    {
        let wep = HDWeapon(target.player.ReadyWeapon);
        return wep? !!GetInjectorMaker(wep) : false;
    }

    states
    {
        Spawn:
            TNT1 A 1
            {
                let injectorMakerClass = GetInjectorMaker(target.player.ReadyWeapon);
                let injectorMaker      = GetDefaultByType(injectorMakerClass);

                if (injectorMaker)
                {
                    sprite = GetInjectorSprite(injectorMaker);
                    scale  = injectorMaker.scale;
                }
                else sprite = Sprite_TNT1;

                LowerIfAttackHeld(7., 7.);
            }
            Wait;
    }
}
