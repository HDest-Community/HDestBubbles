class HDestBubbleHandler : StaticEventHandler
{
    HDestBubbler bubblers[MAXPLAYERS];
    Array<Class<HideousBubble> > bubbleClasses;

    Dictionary injectorSprites;

    override void OnRegister()
    {
        injectorSprites = Dictionary.Create();

        for (int i = 0; i < AllActorClasses.Size(); i++)
        {
            let thisClass = AllActorClasses[i];

            // bubbles
            let bubbleClass = (Class<HideousBubble>)(thisClass);
            if (bubbleClass && !IsAbstract(bubbleClass)) bubbleClasses.Push(bubbleClass);
            if (bubbleClass) continue;
        }
    }

    // lzdoom compat: compare class against known abstract classes
    static clearscope bool IsAbstract(Class checkClass)
    {
        // return checkClass.isAbstract();
        return checkClass == 'HideousBubble' || checkClass == 'Bubble_Weapon';
    }

    override void WorldLoaded(WorldEvent e)
    {
        if (!e.IsSaveGame) return;

        HDestBubbler bubbler;
        let iter = ThinkerIterator.Create('HDestBubbler', Thinker.STAT_DEFAULT);
        while ((bubbler = HDestBubbler(iter.Next())))
        {
            if (CheckPlayer(bubbler.owner))
            {
                bubblers[bubbler.owner.PlayerNumber()] = bubbler;
                bubbler.handler = self;
            }
            else bubbler.Destroy();
        }
    }

    override void WorldUnloaded(WorldEvent e)
    {
        for (int i = 0; i < bubblers.Size(); i++)
            if (bubblers[i]) bubblers[i].Destroy();
    }

    override void WorldTick()
    {
        bool enabled = hdb_enabled;

        // don't save bubble thinkers
        // this doesn't work if the game's saved while paused
        if (gameaction == ga_savegame || gameaction == ga_autosave) enabled = false;

        if (!enabled) uiCtx.saving = false;

        for (int pi = 0; pi < bubblers.Size(); pi++)
        {
            let shouldHaveThinker = CheckPlayer(players[pi].mo) && enabled;
            if (shouldHaveThinker != !!bubblers[pi])
            {
                if (shouldHaveThinker)
                {
                    bubblers[pi] = new('HDestBubbler');
                    bubblers[pi].owner = players[pi].mo;
                    bubblers[pi].handler = self;
                }
                else bubblers[pi].Destroy();
            }
        }
    }

    override void NetworkProcess(ConsoleEvent e)
    {
        if (e.Name ~== "hdb_cleanup")
        {
            for (int i = 0; i < bubblers.Size(); i++)
                if (bubblers[i]) bubblers[i].Destroy();

            uiCtx.saving = false;
        }
    }

    HDestBubblesUIStorage uiCtx;
    override void UITick()
    {
        if (uiCtx.saving)
        {
            uiCtx.saving = false;

            let iter = ThinkerIterator.Create('HDestBubbler', Thinker.STAT_DEFAULT);
            if (!iter.Next()) return;

            console.printf("\n"
                "\ciWARNING\cj: Failed to destroy bubble thinkers before save.\n"
                "\cjYou will not be able to load this save without Hideous Action Bubbles.\n"
                "\cjTo fix this, \cddisable bubbles while unpaused\cj or run '\cdhdb_cleanup\cj', then save again.\n\n"
            );
        }
        else if (gameaction == ga_savegame || gameaction == ga_autosave) uiCtx.saving = true;
    }

    static clearscope bool CheckPlayer(PlayerPawn mo)
    {
        return mo && mo.player && HDPlayerPawn(mo) && mo.health > 0;
    }

    static clearscope HDestBubbleHandler Get() { return HDestBubbleHandler(StaticEventHandler.Find('HDestBubbleHandler')); }
}
